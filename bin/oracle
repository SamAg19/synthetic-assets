#! /usr/bin/env node

const _ = require('lodash')
const axios = require('axios')
const Web3 = require('web3')
const KrakenClient = require('kraken-api')
const BN = require('bignumber.js')
let { randomHex } = require('web3-utils')
let fs = require('fs').promises

// const { FROM_ADDRESS, ETH_PRICE } = process.env
let FROM_ADDRESS
let ETH_PRICE
// if (!FROM_ADDRESS) {
//   throw new Error('Set FROM_ADDRESS=0x...')
// }

let count = 0
const kraken = new KrakenClient()
const OracleBuild = require('../build/contracts/Oracle.json')
const web3 = new Web3('wss://rinkeby.infura.io/ws/v3/26056f03e83343f5bbd280bafaa52684')
const Oracle = new web3.eth.Contract(OracleBuild.abi, OracleBuild.networks['4'].address, {transactionConfirmationBlocks: 1,
    defaultGas: 500000,
    defaultGasPrice: 2000000000})

async function login () {
  await web3.eth.accounts.wallet.create(0, randomHex(32))
  let pk = await fs.readFile('pk')
  // console.log(pk)
  // let keystoreArray = JSON.parse(rawdata)
  // let wall = await web3.eth.accounts.wallet.decrypt([keystoreArray], password)
  // let pk = wall.accounts[0].privateKey
  // let account = await web3.eth.accounts.privateKeyToAccount(pk)
  // console.log(account)
  web3.eth.accounts.wallet.add(String(pk))
  // console.log(web3.eth.accounts.wallet['0'].address)
  FROM_ADDRESS = await web3.eth.accounts.wallet['0'].address
  console.log(FROM_ADDRESS, ' unlocked')
  // return (from)
}

Oracle.events.Requested(async (err, event) => {
  if (err) {
      console.error(err)
    return
  }
  // await login()
  count++
  const { id, url, selector } = event.returnValues
  console.log(`[${count}]`, 'üôèüèª', '\t', url, '\t', selector)

  const response = await axios.get(url)
  const COM_USD = _.get(response.data, selector)

  let ETH_USD
  //
  // if (ETH_PRICE) {
  //   ETH_USD = ETH_PRICE
  // } else {
    let krakenRes = await kraken.api('Ticker', { pair: 'XETHZUSD' })
    ETH_USD = krakenRes.result.XETHZUSD.c[0]
  // }

  const COM_WEI = ((new BN(COM_USD)).times(1e18)).dividedToIntegerBy(ETH_USD)
  const COM_WEI_HEX = `0x${COM_WEI.toString(16)}`

  console.log(`[${count}]`, '‚úçüèª', '\t', COM_WEI.toString(), '\t', (await Oracle.methods.fulfil(id, COM_WEI_HEX).send({
    from: FROM_ADDRESS,
    gas:200000
  })).transactionHash)

  console.log(`[${count}]`, 'üîè', '\t', await Oracle.methods.read(id).call())
})
login()
console.log('Watching for requests...')

//
// COM_USD
// -------
// ETH_USD
