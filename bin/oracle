#! /usr/bin/env node

const _ = require('lodash')
const axios = require('axios')
const Web3 = require('web3')
const KrakenClient = require('kraken-api')
const BN = require('bignumber.js')

const { FROM_ADDRESS } = process.env

if (!FROM_ADDRESS) {
  throw new Error('Set FROM_ADDRESS=0x...')
}

let count = 0
const kraken = new KrakenClient()
const OracleBuild = require('../build/contracts/Oracle.json')
const web3 = new Web3('ws://localhost:8545')
const Oracle = new web3.eth.Contract(OracleBuild.abi, OracleBuild.networks['420'].address)

Oracle.events.Requested(async (err, event) => {
  if (err) {
    return
  }

  count++
  const { id, url, selector } = event.returnValues
  console.log(`[${count}]`, 'üôèüèª', '\t', url, '\t', selector)

  const response = await axios.get(url)
  const COM_USD = _.get(response.data, selector)

  const krakenRes = await kraken.api('Ticker', { pair: 'XETHZUSD' })
  const ETH_USD = krakenRes.result.XETHZUSD.c[0]

  const COM_WEI = ((new BN(COM_USD)).times(1e18)).dividedToIntegerBy(ETH_USD)
  // const COM_WEI = COM_ETH.times(1e18)
  const COM_WEI_HEX = `0x${COM_WEI.toString(16)}`

  console.log(`[${count}]`, '‚úçüèª', '\t', COM_WEI.toString(), '\t', (await Oracle.methods.fulfil(id, COM_WEI_HEX).send({
    from: FROM_ADDRESS
  })).transactionHash)

  console.log(`[${count}]`, 'üîè', '\t', await Oracle.methods.read(id).call())
})

console.log('Watching for requests...')

//
// COM_USD
// -------
// ETH_USD
